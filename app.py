# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15V1oJZkmM-h4vWXs3p0GOB8yZC2YKy1O
"""

import streamlit as st
import pandas as pd
import re
from datetime import datetime, date
import os

# Crear carpeta de documentos
os.makedirs("documentos", exist_ok=True)

st.set_page_config(page_title="Formulario de Matr√≠cula", layout="centered")
st.title("üìÑ Formulario de Matr√≠cula Preescolar")

# Funciones de validaci√≥n
def solo_letras(campo, etiqueta):
    if campo and not re.match(r"^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$", campo):
        st.warning(f"{etiqueta} solo debe contener letras.")
        return ""
    return campo

def solo_numeros(campo, etiqueta, max_len=20):
    if campo and (not campo.isdigit() or len(campo) > max_len):
        st.warning(f"{etiqueta} debe contener solo n√∫meros y m√°ximo {max_len} d√≠gitos.")
        return ""
    return campo

with st.form("formulario"):
    st.subheader("üßí A. Informaci√≥n del Estudiante")

    primer_nombre = solo_letras(st.text_input("Primer nombre del estudiante"), "Primer nombre")
    segundo_nombre = solo_letras(st.text_input("Segundo nombre del estudiante"), "Segundo nombre")
    primer_apellido = solo_letras(st.text_input("Primer apellido del estudiante"), "Primer apellido")
    segundo_apellido = solo_letras(st.text_input("Segundo apellido del estudiante"), "Segundo apellido")

    num_doc_est = solo_numeros(st.text_input("N√∫mero de documento del estudiante (solo n√∫meros, m√°x. 20 d√≠gitos)"), "Documento del estudiante")

    fecha_nac = st.date_input("Fecha de nacimiento", min_value=date(2000, 1, 1), max_value=date.today())
    lugar_nac = st.text_input("Lugar de nacimiento (Ciudad / Departamento)")
    edad = st.number_input("Edad actual", min_value=3, max_value=6, step=1)
    grupo_etnico = st.selectbox("Grupo √©tnico", ["Ind√≠gena", "Afro", "ROM", "Otro"])
    discapacidad = st.text_input("Discapacidad o condici√≥n especial (escriba 'Ninguna' si no aplica)")
    nivel = st.selectbox("Nivel a matricular", ["Prejard√≠n", "Jard√≠n", "Transici√≥n"])

    st.subheader("üë§ B. Informaci√≥n del Acudiente Principal")

    nombre_acu = solo_letras(st.text_input("Nombre completo del acudiente"), "Nombre del acudiente")
    parentesco = st.selectbox("Parentesco con el estudiante", ["Madre", "Padre", "T√≠o/a", "Abuelo/a", "Otro"])
    if parentesco == "Otro":
        parentesco_otro = solo_letras(st.text_input("Especifica el parentesco (solo letras)"), "Parentesco")
        parentesco = parentesco_otro if parentesco_otro else parentesco

    doc_acu = solo_numeros(st.text_input("N√∫mero de documento del acudiente (solo n√∫meros, m√°x. 20 d√≠gitos)"), "Documento del acudiente")
    tel = st.text_input("Tel√©fono de contacto")
    correo = st.text_input("Correo electr√≥nico")
    direccion = st.text_input("Direcci√≥n de residencia")
    barrio = st.text_input("Barrio o vereda")
    estrato = st.selectbox("Estrato socioecon√≥mico", ["1", "2", "3", "4", "5", "6"])
    vive_junto = st.radio("¬øVive con el estudiante?", ["S√≠", "No"])

    st.subheader("üìé C. Documentos obligatorios")
    doc_rc = st.file_uploader("Registro civil del estudiante", type=["pdf", "jpg", "png"])
    doc_cedula = st.file_uploader("C√©dula del acudiente", type=["pdf", "jpg", "png"])
    doc_eps = st.file_uploader("Certificado de EPS o Sisb√©n", type=["pdf", "jpg", "png"])
    doc_vac = st.file_uploader("Certificado de vacunaci√≥n", type=["pdf", "jpg", "png"])
    doc_recibo = st.file_uploader("Recibo de servicio p√∫blico", type=["pdf", "jpg", "png"])
    doc_adicional = st.file_uploader("Certificado adicional (grupo √©tnico / discapacidad / custodia)", type=["pdf", "jpg", "png"])

    enviado = st.form_submit_button("‚úÖ Enviar inscripci√≥n")

    if enviado:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        doc_id = f"{primer_nombre}_{primer_apellido}_{num_doc_est}_{timestamp}".replace(" ", "_")

        def guardar_doc(file, nombre):
            if file:
                ext = file.name.split(".")[-1]
                archivo = f"{doc_id}_{nombre}.{ext}"
                path = os.path.join("documentos", archivo)
                with open(path, "wb") as f:
                    f.write(file.read())
                return archivo
            return ""

        archivo_rc = guardar_doc(doc_rc, "registro_civil")
        archivo_cedula = guardar_doc(doc_cedula, "cedula_acudiente")
        archivo_eps = guardar_doc(doc_eps, "eps")
        archivo_vac = guardar_doc(doc_vac, "vacunacion")
        archivo_recibo = guardar_doc(doc_recibo, "recibo")
        archivo_adicional = guardar_doc(doc_adicional, "adicional")

        data = {
            "Fecha": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Primer nombre": primer_nombre,
            "Segundo nombre": segundo_nombre,
            "Primer apellido": primer_apellido,
            "Segundo apellido": segundo_apellido,
            "N¬∞ doc estudiante": num_doc_est,
            "Fecha nacimiento": fecha_nac,
            "Lugar nacimiento": lugar_nac,
            "Edad": edad,
            "Grupo √©tnico": grupo_etnico,
            "Condici√≥n especial": discapacidad,
            "Nivel": nivel,
            "Nombre acudiente": nombre_acu,
            "Parentesco": parentesco,
            "Doc acudiente": doc_acu,
            "Tel√©fono": tel,
            "Correo": correo,
            "Direcci√≥n": direccion,
            "Barrio/vereda": barrio,
            "Estrato": estrato,
            "Vive con estudiante": vive_junto,
            "Archivo RC": archivo_rc,
            "Archivo EPS": archivo_eps,
            "Archivo C√©dula": archivo_cedula,
            "Archivo Vacunaci√≥n": archivo_vac,
            "Archivo Recibo": archivo_recibo,
            "Archivo Adicional": archivo_adicional
        }

        archivo_excel = "encuestas.xlsx"
        try:
            df_existente = pd.read_excel(archivo_excel)
            df_nuevo = pd.concat([df_existente, pd.DataFrame([data])], ignore_index=True)
        except FileNotFoundError:
            df_nuevo = pd.DataFrame([data])

        df_nuevo.to_excel(archivo_excel, index=False)
        st.success("‚úÖ Inscripci√≥n enviada y documentos guardados exitosamente.")

# Mostrar resumen
st.markdown("---")
st.subheader("üìä Registros actuales (sesi√≥n activa)")

try:
    df = pd.read_excel("encuestas.xlsx")
    st.dataframe(df.tail(5))  # √∫ltimos 5 registros

    with open("encuestas.xlsx", "rb") as file:
        st.download_button("üì• Descargar Excel completo", file, file_name="encuestas.xlsx")

    st.markdown("---")
    st.subheader("üìé Descarga de documentos individuales")

    seleccion = st.selectbox("Selecciona un estudiante:", df["Primer nombre"] + " " + df["Primer apellido"])
    fila = df[df["Primer nombre"] + " " + df["Primer apellido"] == seleccion].iloc[0]

    docs = {
        "Registro civil": fila["Archivo RC"],
        "C√©dula acudiente": fila["Archivo C√©dula"],
        "EPS o Sisb√©n": fila["Archivo EPS"],
        "Vacunaci√≥n": fila["Archivo Vacunaci√≥n"],
        "Recibo p√∫blico": fila["Archivo Recibo"],
        "Certificado adicional": fila["Archivo Adicional"]
    }

    for nombre, archivo in docs.items():
        if archivo and os.path.exists(os.path.join("documentos", archivo)):
            with open(os.path.join("documentos", archivo), "rb") as file:
                st.download_button(f"üìÑ Descargar {nombre}", file, file_name=archivo)
        else:
            st.write(f"‚ö†Ô∏è {nombre}: No cargado.")

except FileNotFoundError:
    st.warning("A√∫n no hay registros disponibles.")